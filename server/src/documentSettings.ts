// cSpell:ignore pycache
import { Connection, TextDocument } from './vscode.workspaceFolders';
import * as vscode from './vscode.workspaceFolders';
import {
    ExcludeFilesGlobMap,
    ExclusionFunction,
    Glob
} from 'cspell';
import * as path from 'path';

import * as CSpell from 'cspell';
import { CSpellUserSettings } from './cspellConfig';

interface ExtSettings {
    settings: CSpellUserSettings;
    fnExclude: (uri: string) => boolean;
}

const defaultExclude: Glob[] = [
    'debug:*',
    'debug:/**',        // Files that are generated while debugging (generally from a .map file)
    'vscode:/**',       // VS Code generated files (settings.json for example)
    'private:/**',
    'markdown:/**',     // The HTML generated by the markdown previewer
    'git-index:/**',    // Ignore files loaded for git indexing
    '**/*.rendered',
    '**/*.*.rendered',
    '__pycache__/**',   // ignore cache files.
];


export class DocumentSettings {
    // Cache per folder settings
    private _settingsByWorkspaceFolder: Promise<Map<string, CSpellUserSettings>> | undefined;
    private readonly settingsByDoc = new Map<string, CSpellUserSettings>();
    private _folders: Promise<vscode.WorkspaceFolder[]> | undefined;
    readonly configsToImport = new Set<string>();

    constructor(readonly connection: Connection, readonly defaultSettings: CSpellUserSettings) {}

    async getSettings(document: TextDocument): Promise<CSpellUserSettings> {
        return this.fetchDocSettings(document);
    };
    // isExcluded(document: TextDocument): Promise<boolean>;
    resetSettings() {
        this._settingsByWorkspaceFolder = undefined;
        this.settingsByDoc.clear();
        this._folders = undefined;
    };

    get folders(): Promise<vscode.WorkspaceFolder[]> {
        if (!this._folders) {
            this._folders = this.fetchFolders();
        }
        return this._folders!;
    }

    get settingsByWorkspaceFolder() {
        if (!this._settingsByWorkspaceFolder) {
            this._settingsByWorkspaceFolder = this.fetchFolderSettings();
        }
        return this._settingsByWorkspaceFolder!;
    }

    registerConfigurationFile(path: string) {
        configsToImport.add(path);
    }


    private async fetchDocSettings(document: TextDocument): Promise<CSpellUserSettings> {
        const docUri = document.uri;
        const settingsVSCode: Settings = await vscode.getDocumentSettings(this.connection, document);
        // Get folder level settings
        const settingsByFolder = await this.settingsByWorkspaceFolder;
        const matchingFolderSettings = [...settingsByFolder]
            .filter(([uri]) => uri === docUri.slice(0, uri.length))
            .sort((a, b) => a.length - b.length)
            .reverse();
        const folderSettings = matchingFolderSettings.map(([, s]) => s);
        const importPaths = [...configsToImport.keys()].sort();
        const importSettings = CSpell.readSettingsFiles(importPaths);
        const spellSettings = CSpell.mergeSettings(this.defaultSettings, importSettings, ...folderSettings, settingsVSCode.cSpell || {});
        return spellSettings;
    }

    private async fetchFolders() {
        return await vscode.getWorkspaceFolders(this.connection) || [];
    }

    private async fetchFolderSettings() {
        const folders = await this.fetchFolders();
        return new Map(readAllWorkspaceFolderSettings(folders));
    }
}

const configsToImport = new Set<string>();

// The settings interface describe the server relevant settings part
interface Settings {
    cSpell?: CSpellUserSettings;
    search?: {
        exclude?: ExcludeFilesGlobMap;
    };
}

interface VsCodeSettings {
    [key: string]: any;
}

interface ExtDocSettings {
    vscodeSettings: Settings;
    cSpellSettings: CSpellUserSettings;
    fnFileExclusionTest: ExclusionFunction;
}

function configPathsForRoot(workspaceRoot?: string) {
    return workspaceRoot ? [
        path.join(workspaceRoot, '.vscode', CSpell.defaultSettingsFilename.toLowerCase()),
        path.join(workspaceRoot, '.vscode', CSpell.defaultSettingsFilename),
        path.join(workspaceRoot, CSpell.defaultSettingsFilename.toLowerCase()),
        path.join(workspaceRoot, CSpell.defaultSettingsFilename),
    ] : [];
}

function readAllWorkspaceFolderSettings(workspaceFolders: vscode.WorkspaceFolder[]): [string, CSpellUserSettings][] {
    return workspaceFolders
        .map(folder => folder.uri)
        .map(uri => [uri, configPathsForRoot(uri)] as [string, string[]])
        .map(([uri, paths]) => [uri, CSpell.readSettingsFiles(paths)] as [string, CSpellUserSettings]);
}






